image: eclipse-temurin:17-jdk-jammy

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "33"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "33.0.2"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "9477386"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget unzip

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-sdk-root"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --no-verbose --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  - unzip -q -d "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools.zip"
  - mv -T "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/tools"
  - export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/cmdline-tools/tools/bin

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --licenses > /dev/null || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

  - echo $ANDROID_KEYSTORE_PROPERTIES | base64 -d > app/keystore.properties
  - echo $ANDROID_KEYSTORE_FILE | base64 -d > app/farma_quiz_keystore.jks
  - echo $GOOGLE_PLAY_SERVICE_ACCOUNT_FILE | base64 -d > app/farma-quiz-406212-7fcf675014c9.json
  - echo $GOOGLE_SERVICE_FILE | base64 -d > app/google-services.json
  - export GRADLE_USER_HOME=`pwd`./gradle


cache:
  key: gradle
  paths:
    - ~./gradle/caches
    - ~./gradle/wrapper


stages:
  - lint
  - test
  - build
  - internal
  - alpha

lint:
  stage: lint
  script:
    - ./gradlew lint

test:
  stage: test
  script:
    - ./gradlew test

build:
  stage: build
  script:
    - ./gradlew assembleRelease

internal:
  stage: internal
  environment: internal
  script:
    - ./gradlew publishReleaseApps

alpha:
  stage: alpha
  environment: alpha
  when: manual
  script:
    - ./gradlew promoteArtifact --promote-track alpha
